@using APS.Dominio.Entities;
@model UsuarioViewModel




















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/APS.WebApp.styles.css" asp-append-version="true" />

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Helvetica, sans-serif;
            color: #323232;
            border: none;
        }

        input, label {
            display: block;
            outline: none;
            width: 100%;
        }

        a {
            color: #E60084;
        }

        body {
            padding-top: 5vh;
            background-image: url('../img/bg-register-page.jpg');
            background-size: cover;
            background-position-y: -150px;
        }

        /* form */
        #main-container {
            width: 500px;
            margin-left: auto;
            margin-right: auto;
            background-color: #FFF;
            border-radius: 10px;
            padding: 25px;
        }

            #main-container h1 {
                text-align: center;
                margin-bottom: 25px;
                font-size: 1.6rem;
            }

        form {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }

        .full-box {
            flex: 1 1 100%;
            position: relative;
        }

        .half-box {
            flex: 1 1 45%;
            position: relative;
        }

        .spacing {
            margin-right: 2.5%;
        }

        label {
            font-weight: bold;
            font-size: .8rem;
        }

        input {
            border-bottom: 2px solid #323232;
            padding: 10px;
            font-size: .9rem;
            margin-bottom: 40px;
        }

            input:focus {
                border-color: #E60084;
            }

            input[type="submit"] {
                background-color: #E60084;
                color: #FFF;
                border: none;
                border-radius: 20px;
                height: 40px;
                cursor: pointer;
            }

        #agreement {
            margin-right: 5px;
        }

        #agreement, #agreement-label {
            display: inline-block;
            width: auto;
        }

        .error-validation {
            color: #ff1a1a;
            position: absolute;
            top: 57px;
            font-size: 12px;
        }

        .template {
            display: none;
        }


        body {
            padding-top: 0;
            background-image: url('../img/bg-register-page.jpg');
            background-size: cover;
            background-position-y: -150px;
            background-color: #FFCCCC; /* Cor de fundo vermelho claro */
        }

        .custom-navbar {
            background-color: #FFCCCC; /* Cor de fundo vermelho claro */
        }

        .li {
            margin: 0 20px;
        }

        .a {
            text-decoration: none;
            color: #E60084;
            transition: color 0.3s;
            font-weight: bold;
        }
    </style>

    <script>
        class Validator {
            constructor() {
                this.validations = [
                    'data-min-length',
                    'data-max-length',
                    'data-only-letters',
                    'data-email-validate',
                    'data-required',
                    'data-equal',
                    'data-password-validate',
                ]
            }

            // inicia a validação de todos os campos
            validate(form) {
                // limpa todas as validações antigas let currentValidations = document.querySelectorAll('form .error-validation');
                if (currentValidations.length) {
                    this.cleanValidations(currentValidations);
                }

                // pegar todos inputs
                let inputs = form.getElementsByTagName('input');
                // transformar HTMLCollection em arr
                let inputsArray = [...inputs];

                // loop nos inputs e validação mediante aos atributos encontrados
                inputsArray.forEach(function (input, obj) {

                    // fazer validação de acordo com o atributo do input
                    for (let i = 0; this.validations.length > i; i++) {
                        if (input.getAttribute(this.validations[i]) != null) {

                            // limpa string para saber o método
                            let method = this.validations[i].replace("data-", "").replace("-", "");

                            // valor do input
                            let value = input.getAttribute(this.validations[i])

                            // invoca o método
                            this[method](input, value);

                        }
                    }

                }, this);
            }

            // método para validar se tem um mínimo de caracteres
            minlength(input, minValue) {
                let inputLength = input.value.length;
                let errorMessage = `O campo precisa ter pelo menos $

                                                {
                                                    minValue
                                                }

                                                caracteres`;

                if (inputLength < minValue) {
                    this.printMessage(input, errorMessage);
                }

            }

            // método para validar se passou do máximo de caracteres
            maxlength(input, maxValue) {
                let inputLength = input.value.length;
                let errorMessage = `O campo precisa ter menos que $

                                                {
                                                    maxValue
                                                }

                                                caracteres`;

                if (inputLength > maxValue) {
                    this.printMessage(input, errorMessage);
                }

            }

            // método para validar strings que só contem letras
            onlyletters(input) {
                let re = /^[A-Za-z]+$/;
                ;
                let inputValue = input.value;
                let errorMessage = `Este campo não aceita números nem caracteres especiais`;
                if (!re.test(inputValue)) {
                    this.printMessage(input, errorMessage);
                }

            }

            // método para validar e-mail
            emailvalidate(input) {

                let email = input.value;
                let errorMessage = `Insira um e-mail no padrão matheus@email.com`;
                if (!re.test(email)) {
                    this.printMessage(input, errorMessage);
                }

            }

            // verificar se um campo está igual o outro
            equal(input, inputName) {
                let inputToCompare = document.getElementsByName(inputName)[0];
                let errorMessage = `Este campo precisa estar igual ao $

                                                {
                                                    inputName
                                                }

                                                `;

                if (input.value != inputToCompare.value) {
                    this.printMessage(input, errorMessage);
                }

            }

            // método para exibir inputs que são necessários
            required(input) {
                let inputValue = input.value;
                if (inputValue === '') {
                    let errorMessage = `Este campo é obrigatório`;
                    this.printMessage(input, errorMessage);
                }

            }

            // validando o campo de senha
            passwordvalidate(input) {
                // explodir string em array let charArr = input.value.split("");
                let uppercases = 0;
                let numbers = 0;
                for (let i = 0; charArr.length > i; i++) {
                    if (charArr[i] === charArr[i].toUpperCase() && isNaN(parseInt(charArr[i]))) {
                        uppercases++;
                    }

                    else if (!isNaN(parseInt(charArr[i]))) {
                        numbers++;
                    }

                }

                if (uppercases === 0 || numbers === 0) {
                    let errorMessage = `A senha precisa um caractere maiúsculo e um número`;
                    this.printMessage(input, errorMessage);
                }

            }

            // método para imprimir mensagens de erro
            printMessage(input, msg) {
                // checa os erros presentes no input let errorsQty = input.parentNode.querySelector('.error-validation');
                // imprimir erro só se não tiver erros if (errorsQty === null)

                {
                    let template = document.querySelector('.error-validation').cloneNode(true);
                    template.textContent = msg;
                    let inputParent = input.parentNode;
                    template.classList.remove('template');
                    inputParent.appendChild(template);
                }

            }

            // remove todas as validações para fazer a checagem novamente
            cleanValidations(validations) {
                validations.forEach(el => el.remove());
            }

        }

        let form = document.getElementById('register-form');
        let submit = document.getElementById('btn-submit');

        let validator = new Validator();

        // evento de envio do form, que valida os inputs
        submit.addEventListener('click', function (e) {
            e.preventDefault();

            validator.validate(form);
        });





    </script>

</head>
<body>

    @*<nav class="navbar navbar-expand-lg navbar-light custom-navbar">
    <a class="navbar-brand" href="#">DST'Security</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarText">
    <ul class="navbar-nav mr-auto">
    <!-- Seus itens de navegação aqui -->
    </ul>
    <span class="navbar-text">
    DST's não escolhe idade, genêro ou raça. Proteja-se com camisinha.
    </span>
    </div>
    </nav>*@

    <header>
    </header>


    <div id="main-container">
        <h1>Login para entrar</h1>
        <nav>
            <ul>
                <li><a href="https://localhost:7179/cADASTRoPessoas/Editar">Atualizar Cadastro</a></li>
                <li><a href="https://localhost:7179/cADASTRoPessoas/Excluir">Excluir Cadastro</a></li>

            </ul>
        </nav>

        <form asp-action="Autenticar" asp-controller="Autenticacao" method="POST">
            <div class="full-box">
                <label for="Email">E-mail</label>
                <input asp-for="Email" class="form-control" />
            </div>
            <div class="half-box spacing">
                <label for="Senha">Senha</label>
                <input asp-for="Senha" type="password" class="form-control" />
            </div>

            <hr />

            <div class="full-box">
                <input id="btn-submit" type="submit" value="Entrar">
            </div>
        </form>
    </div>

    <p class="error-validation template"> </p>


   
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

</body>
</html>
